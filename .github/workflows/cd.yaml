name: Deploy Workflow

on:
  push:
    branches:
      - dev
      - main

  workflow_dispatch:
    inputs:
      tag:
        description: "New image tag (e.g., v1.0, v1.1, etc.)"
        required: true
        type: string
        default: "latest"
      environment:
        description: "Target environment (e.g., dev or prod)"
        required: true
        type: choice
        default: "dev"
        options:
          - dev
          - prod

permissions:
  contents: write

jobs:
  build-and-push-image:
    name: Build and push Docker image to ACR
    runs-on: ubuntu-latest
    outputs:
      image_name: ${{ steps.docker_build.outputs.image_name }}
      tag: ${{ steps.docker_build.outputs.tag }}
    steps:
      - name: Checkout Repo
        uses: actions/checkout@v4

      - name: Login to ACR
        uses: docker/login-action@v3
        with:
          registry: ${{ vars.ACR_LOGIN_SERVER }}
          username: ${{ vars.ACR_USERNAME }}
          password: ${{ secrets.ACR_PASSWORD }}

      - name: Build Docker image
        id: docker_build
        run: |
          REGISTRY_SERVER=${{ vars.ACR_LOGIN_SERVER }}
          APP_NAME=${{ vars.APP_NAME }}
          TAG=${{ github.sha }}

          # If triggered by workflow_dispatch, use the provided tag instead of github.sha
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            TAG="${{ inputs.tag }}"
          fi
          
          IMAGE_NAME=$REGISTRY_SERVER/$APP_NAME
          TAGGED_IMAGE_NAME=$IMAGE_NAME:$TAG

          docker build \
            -t $IMAGE_NAME \
            -t $TAGGED_IMAGE_NAME \
            .

          echo "Success: Built $APP_NAME with tag: $TAG"

          docker push $TAGGED_IMAGE_NAME

          echo "image_name=$IMAGE_NAME" >> $GITHUB_OUTPUT
          echo "tag=$TAG" >> $GITHUB_OUTPUT

  deploy:
    name: Set new docker image tag in infra specification
    runs-on: ubuntu-latest
    needs: [build-and-push-image]
    steps:
      - name: Checkout infra repo
        uses: actions/checkout@v4
        with:
          repository: ${{ vars.INFRA_REPO }}
          token: ${{ secrets.DEPLOY_GH_TOKEN }}

      - name: Set deployment variables
        id: set_vars
        run: |
          echo "image_name=${{ needs.build-and-push-image.outputs.image_name }}" >> $GITHUB_ENV

          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            echo "tag=${{ inputs.tag }}" >> $GITHUB_ENV
            echo "environment=${{ inputs.environment }}" >> $GITHUB_ENV
          else
            echo "tag=${{ needs.build-and-push-image.outputs.tag }}" >> $GITHUB_ENV
            echo "environment=dev" >> $GITHUB_ENV
          fi

      - name: Update Target Environment Image Tag
        run: |
          sudo apt update && sudo apt install -y yq

          cd kustomize/${{ vars.APP_NAME }}/overlays/${{ env.environment }}
          
          yq -i '(.images[] | select(.name == "${{ env.image_name }}")).newTag = "${{ env.tag }}"' kustomization.yaml -y

      - name: Commit and Push
        env:
          GITHUB_TOKEN: ${{ secrets.DEPLOY_GH_TOKEN }}
        run: |
          CALLER="${{ github.event_name }}"

          git config user.name "gh-actions-$CALLER"
          git config user.email "github-actions@github.com"

          git add .
          git commit -m "Deploy new image tag $tag to ${{ env.environment }} by $CALLER"
          git push
